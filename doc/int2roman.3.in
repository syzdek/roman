.\"
.\" Roman Numeral Conversion API
.\" Copyright (C) 2007 David M. Syzdek <roman-project@syzdek.net>.
.\" Copyright (C) 2010 Bindle Binaries
.\"
.\" @configure_input@
.\"
.\" doc/int2roman.3.in - man page for Roman Numeral routines
.\"
.TH "ROMAN NUMERAL API" 3 "@RELEASE_MONTH@" "@PACKAGE_TARNAME@ @PACKAGE_VERSION@"
.SH NAME
int2roman, int2roman_r \- convert
.I signed int
to ASCII string containing the Roman Numeral value
.SH LIBRARY
Roman Numeral Conversion API (libroman, -lroman)
.SH SYNOPSIS
\fB#include <roman.h>\fR
.sp
\fIconst char *\fR
.br
\fBint2roman\fR(\fIint num\fR);
.sp
\fIchar *\fR
.br
\fBint2roman_r\fR(\fIint num\fR, \fIchar * buff\fR, \fIsize_t len\fR);
.SH DESCRIPTION
The function
.B int2roman
takes an argument of
.I num
and returns a pointer to a string containing the integer's Roman Numeral
representation of the integer's value.  Subsequent calls to
.B int2roman
will overwrite previous values.
.PP
The function
.B int2roman_r
provides the same functionality as
.B int2roman,
except that the caller must provide the out buffer
.I buff
to store the result.
.I buff
must be at least
.I len
characters long.
.SH RETURN VALUES
If successful, 
.B int2roman
and
.B int2roman_r
return a pointer to a string containing the Roman Numeral representation of the value of
.I num.
If there is an error, they will return a
.B NULL
pointer and set
.I errno
to indicate the error condition.
.SH ERRORS
.TP
.B EDOM
\fInum\fR is too large to be represented using this method.
.TP
.B EFAULT
bad address in \fIstr\fR
.TP
.B ENOBUFS
Insufficient storage space available in \fIstr\fR.
.SH EXAMPLES
\fB#include <stdio.h>\fR
.br
\fB#include <string.h>\fR
.br
\fB#include <roman.h>\fR
.sp
\fIint\fR \fBmain\fR(\fIint argc\fR, \fIchar * argv[]\fR);
.sp
\fIint\fR \fBmain\fR(\fIint argc\fR, \fIchar * argv[]\fR)
.br
{
.br
   \fIint          i\fR;
   \fIint          num\fR;
   \fIchar         buff[512]\fR;
   \fIconst char * ptr\fR;
.sp
   \fBfor\fR(\fIi\fR = 1; \fIi\fR < \fIargc\fR; \fIi\fR++)
.br
   {
.br
      \fInum\fR = \fBatol\fR(\fIargv\fR[\fIi\fR]);
.sp
      \fIptr\fR = \fBint2roman\fR(\fInum\fR);
.br
      \fBif\fR(\fIptr\fR)
.br
         \fBprintf\fR("%i == %s\\n", \fInum\fR, \fIptr\fR);
.br
      \fBelse\fR
.br
         \fBperror\fR("int2roman_r()");
.sp
      \fIptr\fR = \fBint2roman_r\fR(\fInum\fR, \fIbuff\fR, \fI512\fR);
.br
      \fBif\fR(\fIptr\fR)
.br
         \fBprintf\fR("%i == %s\\n", \fInum\fR, \fIptr\fR);
.br
      \fBelse\fR
.br
         \fBperror\fR("int2roman_r()");
.br
   }
.sp
   \fBreturn\fR(\fI0\fR);
.br
}
.SH REPORTING BUGS
Report bugs to <@PACKAGE_BUGREPORT@>.
.SH SEE ALSO
.BR roman (7),
.BR romandate (1)
.BR romannum (1)
.BR roman2int (3)
.BR roman_ctime (3)
.BR roman_strftime (3)
.\" end of man page
